/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dotbook;

import com.opencsv.CSVReader;
import java.util.*;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Irwin
 */
public class UserInterface extends javax.swing.JFrame {

    public static Performer[] performers;
    final static int SET_COUNT = 66;
    final static int PERFORMER_COUNT = 109;

    /**
     * Creates new form UserInterface
     *
     * @throws java.lang.Exception
     */
    public UserInterface() throws Exception {
        initComponents();
        openCSV();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        idLabel = new javax.swing.JLabel();
        idInput = new javax.swing.JTextField();
        startSetInput = new javax.swing.JTextField();
        setLabel = new javax.swing.JLabel();
        submitPrintJob = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        song = new javax.swing.JLabel();
        number = new javax.swing.JLabel();
        set = new javax.swing.JLabel();
        measures = new javax.swing.JLabel();
        move = new javax.swing.JLabel();
        side = new javax.swing.JLabel();
        hPos = new javax.swing.JLabel();
        vPos = new javax.swing.JLabel();
        endSetInput = new javax.swing.JTextField();
        toLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        idLabel.setText("Performer ID:");

        idInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                idInputActionPerformed(evt);
            }
        });

        startSetInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startSetInputActionPerformed(evt);
            }
        });

        setLabel.setText("Sets:");

        submitPrintJob.setText("Submit");
        submitPrintJob.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitPrintJobActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        song.setText("----");

        number.setText("----");

        set.setText("----");

        measures.setText("----");

        move.setText("----");

        side.setText("----");

        hPos.setText("----");

        vPos.setText("----");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(number)
                            .addComponent(song))
                        .addGap(0, 170, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(set)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(side))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(measures)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(hPos))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(move)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(vPos)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(song)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(number)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(set)
                    .addComponent(side))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(measures)
                    .addComponent(hPos))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(move)
                    .addComponent(vPos))
                .addContainerGap(101, Short.MAX_VALUE))
        );

        endSetInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endSetInputActionPerformed(evt);
            }
        });

        toLabel.setText("to");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(idInput)
                            .addComponent(idLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(startSetInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(toLabel))
                            .addComponent(setLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(endSetInput, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(submitPrintJob)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idLabel)
                            .addComponent(setLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(startSetInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(endSetInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(toLabel)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(submitPrintJob)))
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void idInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_idInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_idInputActionPerformed

    private void startSetInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startSetInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_startSetInputActionPerformed

    private void submitPrintJobActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitPrintJobActionPerformed
        String id = idInput.getText();
        String startSet = startSetInput.getText();
        String endSet = endSetInput.getText();

        int indx = -1;

        for (int i = 0; i < performers.length; i++) {
            if (performers[i].id.equalsIgnoreCase(id)) {
                indx = i;
            }
        }

        if (indx == -1) {
            System.out.println("Performer not found!");
        }
        Performer performer = performers[indx];

        int sNum;
        char sSub = '-';
        int eNum;
        char eSub = '-';

        String setNumString = "";
        for (int i = 0; i < startSet.length(); i++) {
            if (startSet.charAt(i) > 47 && startSet.charAt(i) < 58) {
                setNumString += startSet.charAt(i);
            } else if (startSet.charAt(i) > 64 && startSet.charAt(i) < 91) {
                sSub = startSet.charAt(i);
            } else {
                System.out.println("Invalid (sub)set string!");
            }
        }
        sNum = Integer.parseInt(setNumString);

        setNumString = "";
        for (int i = 0; i < endSet.length(); i++) {
            if (endSet.charAt(i) > 47 && endSet.charAt(i) < 58) {
                setNumString += endSet.charAt(i);
            } else if (endSet.charAt(i) > 64 && endSet.charAt(i) < 91) {
                eSub = endSet.charAt(i);
            } else {
                System.out.println("Invalid (sub)set string!");
            }
        }
        eNum = Integer.parseInt(setNumString);

        int sIndx = performer.getSetIndx(sNum, sSub);
        int eIndx = performer.getSetIndx(eNum, eSub);
        try {
                Printer.print(indx, sIndx, eIndx);
        } catch (Exception ex) {
            Logger.getLogger(UserInterface.class.getName()).log(Level.SEVERE, null, ex);
        }
        System.out.println("done");
    }//GEN-LAST:event_submitPrintJobActionPerformed

    private void endSetInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endSetInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_endSetInputActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new UserInterface().setVisible(true);
            } catch (Exception ex) {
            }
        });
    }

    public static void openCSV() throws Exception {
        CSVReader reader = new CSVReader(new FileReader("coordinates.csv"));
        List<String[]> list = reader.readAll();
        String[][] dataArr = new String[PERFORMER_COUNT][SET_COUNT];
        dataArr = list.toArray(dataArr);
        performers = new Performer[PERFORMER_COUNT];
        for (int i = 0; i < PERFORMER_COUNT; i++) {
            Set[] sets = new Set[SET_COUNT];
            for (int j = 1; j <= SET_COUNT; j++) {
                sets[j - 1] = parseCell(dataArr[i][j]);
            }
            performers[i] = new Performer(dataArr[i][0], sets);
        }
    }

    public static Set parseCell(String cellContent) {
        Scanner sc = new Scanner(cellContent);
        int length = 0;

        while (sc.hasNext()) {
            length++;
            String s = sc.next();
        }
        String[] a = new String[length];
        sc = new Scanner(cellContent);
        int i = 0;
        while (sc.hasNext()) {
            a[i] = sc.next();
            i++;
        }
        String setNumString = "";
        char subset = '-';
        int setNumInt;
        for (i = 0; i < a[0].length(); i++) {
            if (a[0].charAt(i) > 47 && a[0].charAt(i) < 58) {
                setNumString += a[0].charAt(i);
            } else if (a[0].charAt(i) > 64 && a[0].charAt(i) < 91) {
                subset = a[0].charAt(i);
            } else {
                System.out.println("Invalid (sub)set string at line 375, i=" + i + "a[0]=" + a[0]);
            }
        }

        setNumInt = Integer.parseInt(setNumString);

        int startMeas = -1;
        int endMeas = -1;
        int counts = -1;
        int side = -1;
        double hAdj = -1;
        int yardLine = -1;
        double vAdj = -1;
        String hashLine = "blank";
        boolean sideFound = false;
        for (i = 1; i < a.length; i++) {
            if (a[i].equals("Side")) {
                sideFound = true;
                side = Integer.parseInt(a[i + 1].substring(0, 1));

                counts = Integer.parseInt(a[i - 1]);
                if (i == 2) {
                    startMeas = 0;
                    endMeas = 0;
                } else if (i == 3 || i == 4) {
                    if (a[i - 2].charAt(a[i - 2].length() - 1) == 'd') {
                        endMeas = 999;
                        int hyphenIndx = -1;
                        for (int j = 0; j < a[i - 2].length(); j++) {
                            if (a[i - 2].charAt(j) == 45) {
                                hyphenIndx = j;
                            }
                        }
                        if (hyphenIndx == -1) {
                            startMeas = 999;
                        } else {
                            startMeas = Integer.parseInt(a[i - 2].substring(0, hyphenIndx));
                        }
                    } else {
                        int hyphenIndx = -1;
                        for (int j = 0; j < a[i - 2].length(); j++) {
                            if (a[i - 2].charAt(j) == 45) {
                                hyphenIndx = j;
                            }
                        }
                        if (hyphenIndx == -1) {
                            startMeas = Integer.parseInt(a[i - 2]);
                            endMeas = Integer.parseInt(a[i - 2]);
                        } else {
                            startMeas = Integer.parseInt(a[i - 2].substring(0, hyphenIndx));
                            endMeas = Integer.parseInt(a[i - 2].substring(hyphenIndx + 1));
                        }
                    }
                } else {
                    System.out.println("Invalid spacing between setNum and \"Side\"");
                }

                for (int j = i + 1; j < a.length; j++) {
                    if (a[j].equals("ln")) {
                        if (a[j - 3].equals("inside")) {
                            hAdj = Double.parseDouble(a[i + 2]);
                        } else if (a[j - 3].equals("outside")) {
                            hAdj = -1 * Double.parseDouble(a[i + 2]);
                        } else if (j - i == 5 && a[j - 3].equals("On")) {
                            hAdj = 0;
                        } else {
                            System.out.println("Not \"inside\", \"outside\", or \"On\"!  line 441, i=" + i + "  j=" + j + "  a[j-3]=" + a[j - 3]);
                        }

                        yardLine = Integer.parseInt(a[j - 2]);
                        if (a[j + 2].equals("steps")) {
                            if (a[j + 3].equals("behind")) {
                                vAdj = -1 * Double.parseDouble(a[j + 1]);
                            } else if (a[j + 4].equals("front")) {
                                vAdj = Double.parseDouble(a[j + 1]);
                            } else {
                                System.out.println("Not \"behind\", \"front\", or \"On\"! line 454, i=" + i + "  j=" + j + "  a[j+1]=" + a[j + 1] + "  a[j+2]=" + a[j + 2] + "  a[j+3]=" + a[j + 3] + "  a[j+4]=" + a[j + 4]);
                            }
                        } else if (a[j + 1].equals("On")) {
                            vAdj = 0;
                        } else {
                            System.out.println("Not \"behind\", \"front\", or \"On\"! line 454, i=" + i + "  j=" + j + "  a[j+1]=" + a[j + 1] + "  a[j+2]=" + a[j + 2] + "  a[j+3]=" + a[j + 3] + "  a[j+4]=" + a[j + 4]);
                        }
                    }
                    if (a[a.length - 3].equals("Front") && a[a.length - 2].equals("side")) {
                        hashLine = "front side line";
                    } else if (a[a.length - 3].equals("Front") && a[a.length - 2].equals("Hash")) {
                        hashLine = "front hash";
                    } else if (a[a.length - 3].equals("Back") && a[a.length - 2].equals("Hash")) {
                        hashLine = "back hash";
                    } else if (a[a.length - 3].equals("Back") && a[a.length - 2].equals("side")) {
                        hashLine = "back side line";
                    } else {
                        System.out.println("Invalid hash/side line, line 466, a=" + Arrays.toString(a));
                    }
                }
            }
        }
        if (!sideFound) {
            side = 0;
            for (i = 1; i < a.length; i++) {
                if (a[i].equals("On") && a[i + 1].equals("50")) {
                    counts = Integer.parseInt(a[i - 1]);
                    if (i == 2) {
                        startMeas = 0;
                        endMeas = 0;
                    } else if (i == 3 || i == 4) {
                        if (a[i - 2].charAt(a[i - 2].length() - 1) == 'd') {
                            endMeas = 999;
                            int hyphenIndx = -1;
                            for (int j = 0; j < a[i - 2].length(); j++) {
                                if (a[i - 2].charAt(j) == 45) {
                                    hyphenIndx = j;
                                }
                            }
                            if (hyphenIndx == -1) {
                                startMeas = 999;
                            } else {
                                startMeas = Integer.parseInt(a[i - 2].substring(0, hyphenIndx));
                            }
                        } else {
                            int hyphenIndx = -1;
                            for (int j = 0; j < a[i - 2].length(); j++) {
                                if (a[i - 2].charAt(j) == 45) {
                                    hyphenIndx = j;
                                }
                            }
                            if (hyphenIndx == -1) {
                                startMeas = Integer.parseInt(a[i - 2]);
                                endMeas = Integer.parseInt(a[i - 2]);
                            } else {
                                startMeas = Integer.parseInt(a[i - 2].substring(0, hyphenIndx));
                                endMeas = Integer.parseInt(a[i - 2].substring(hyphenIndx + 1));
                            }
                        }
                    } else {
                        System.out.println("Invalid spacing between setNum and \"Side\"");
                    }

                    hAdj = 0;
                    yardLine = 50;

                    if (a[i + 5].equals("steps")) {
                        if (a[i + 6].equals("behind")) {
                            vAdj = -1 * Double.parseDouble(a[i + 4]);
                        } else if (a[i + 7].equals("front")) {
                            vAdj = Double.parseDouble(a[i + 4]);
                        } else {
                            System.out.println("Not \"behind\", \"front\", or \"On\"! line 525, i=" + i + "  a[i+5]=" + a[i + 5] + "  a[i+3]=" + a[i + 3] + "  a[i+7]=" + a[i + 7] + "  a[i+4]=" + a[i + 4] + Arrays.toString(a));
                        }

                    } else if (a[i + 4].equals("On")) {
                        vAdj = 0;
                    } else {
                        System.out.println("Not \"behind\", \"front\", or \"On\"! line 525, i=" + i + "  a[i+5]=" + a[i + 5] + "  a[i+3]=" + a[i + 3] + "  a[i+7]=" + a[i + 7] + "  a[i+4]=" + a[i + 4] + Arrays.toString(a));
                    }
                    if (a[a.length - 3].equals("Front") && a[a.length - 2].equals("side")) {
                        hashLine = "front side line";
                    } else if (a[a.length - 3].equals("Front") && a[a.length - 2].equals("Hash")) {
                        hashLine = "front hash";
                    } else if (a[a.length - 3].equals("Back") && a[a.length - 2].equals("Hash")) {
                        hashLine = "back hash";
                    } else if (a[a.length - 3].equals("Back") && a[a.length - 2].equals("side")) {
                        hashLine = "back side line";
                    } else {
                        System.out.println("Invalid hash/side line, line 537");
                    }
                }
            }
        }

        if (setNumInt == 24 && subset
                == 'A') {
            startMeas = 5;
            endMeas = 7;
        } else if (setNumInt == 24 && subset
                == 'B') {
            startMeas = 8;
            endMeas = 9;
        } else if (setNumInt == 25 && subset
                == '-') {
            startMeas = 10;
            endMeas = 12;
        } else if (setNumInt == 38 && subset
                == 'A') {
            startMeas = 77;
            endMeas = 81;
        } else if (setNumInt == 39 && subset
                == '-') {
            startMeas = 82;
            endMeas = 84;
        } else if (setNumInt == 54 && subset
                == 'A') {
            startMeas = 56;
            endMeas = 57;
        } else if (setNumInt == 55 && subset
                == '-') {
            startMeas = 57;
            endMeas = 58;
        } else if (setNumInt == 55 && subset
                == 'A') {
            startMeas = 59;
            endMeas = 59;
        } else if (setNumInt == 56 && subset
                == '-') {
            startMeas = 60;
            endMeas = 60;
        }

        return new Set(setNumInt, subset, startMeas, endMeas, counts,
                new Coordinates(side, hAdj, yardLine, vAdj, hashLine));
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField endSetInput;
    private javax.swing.JLabel hPos;
    private javax.swing.JTextField idInput;
    private javax.swing.JLabel idLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel measures;
    private javax.swing.JLabel move;
    private javax.swing.JLabel number;
    private javax.swing.JLabel set;
    private javax.swing.JLabel setLabel;
    private javax.swing.JLabel side;
    private javax.swing.JLabel song;
    private javax.swing.JTextField startSetInput;
    private javax.swing.JButton submitPrintJob;
    private javax.swing.JLabel toLabel;
    private javax.swing.JLabel vPos;
    // End of variables declaration//GEN-END:variables
}
